segments[, 1] = table(customers_2015$segment)
colnames(segments) = 2015:2025
row.names(segments) = levels(customers_2015$segment)
print(segments)
# Compute for each an every period
for (i in 2:11) {
segments[8, i] = 1000
segments[, i] = segments[, i-1] %*% transition
}
# Plot inactive, active high value customers over time
barplot(segments[1, ])
barplot(segments[2, ])
# Display how segments will evolve over time
print(round(segments))
# --- COMPUTE THE (DISCOUNTED) CLV OF A DATABASE -----------
# Yearly revenue per segment
# This comes directly from module 2, lines 160-161
yearly_revenue = c(0, 0, 0, 0, 0, 323.57, 52.31, 79.17)
# Compute revenue per segment
revenue_per_segment = yearly_revenue * segments
print(revenue_per_segment)
# Compute yearly revenue
yearly_revenue = colSums(revenue_per_segment)
print(round(yearly_revenue))
barplot(yearly_revenue)
# Compute cumulated revenue
cumulated_revenue = cumsum(yearly_revenue)
print(round(cumulated_revenue))
barplot(cumulated_revenue)
# Create a discount factor
discount_rate = 0.10
discount = 1 / ((1 + discount_rate) ^ ((1:11) - 1))
print(discount)
# Compute discounted yearly revenue
disc_yearly_revenue = yearly_revenue * discount
print(round(disc_yearly_revenue))
barplot(disc_yearly_revenue)
lines(yearly_revenue)
# Compute discounted cumulated revenue
disc_cumulated_revenue = cumsum(disc_yearly_revenue)
print(round(disc_cumulated_revenue))
barplot(disc_cumulated_revenue)
# What is the database worth?
print(disc_cumulated_revenue[11] - yearly_revenue[1])
rm(list = ls())
data = read.delim(file = 'purchases.txt', header = FALSE, sep = '\t', dec = '.')
# Add headers and interpret the last column as a date, extract year of purchase
colnames(data) = c('customer_id', 'purchase_amount', 'date_of_purchase')
data$date_of_purchase = as.Date(data$date_of_purchase, "%Y-%m-%d")
data$year_of_purchase = as.numeric(format(data$date_of_purchase, "%Y"))
data$days_since       = as.numeric(difftime(time1 = "2016-01-01",
time2 = data$date_of_purchase,
units = "days"))
# Invoke library to compute key marketing indicators using SQL language
library(sqldf)
# Segment customers in 2015
customers_2015 = sqldf("SELECT customer_id,
MIN(days_since) AS 'recency',
MAX(days_since) AS 'first_purchase',
COUNT(*) AS 'frequency',
AVG(purchase_amount) AS 'amount'
FROM data GROUP BY 1")
customers_2015$segment = "NA"
customers_2015$segment[which(customers_2015$recency > 365*3)] = "inactive"
customers_2015$segment[which(customers_2015$recency <= 365*3 & customers_2015$recency > 365*2)] = "cold"
customers_2015$segment[which(customers_2015$recency <= 365*2 & customers_2015$recency > 365*1)] = "warm"
customers_2015$segment[which(customers_2015$recency <= 365)] = "active"
customers_2015$segment[which(customers_2015$segment == "warm" & customers_2015$first_purchase <= 365*2)] = "new warm"
customers_2015$segment[which(customers_2015$segment == "warm" & customers_2015$amount < 100)] = "warm low value"
customers_2015$segment[which(customers_2015$segment == "warm" & customers_2015$amount >= 100)] = "warm high value"
customers_2015$segment[which(customers_2015$segment == "active" & customers_2015$first_purchase <= 365)] = "new active"
customers_2015$segment[which(customers_2015$segment == "active" & customers_2015$amount < 100)] = "active low value"
customers_2015$segment[which(customers_2015$segment == "active" & customers_2015$amount >= 100)] = "active high value"
customers_2015$segment = factor(x = customers_2015$segment, levels = c("inactive", "cold",
"warm high value", "warm low value", "new warm",
"active high value", "active low value", "new active"))
# Segment customers in 2014
customers_2014 = sqldf("SELECT customer_id,
MIN(days_since) - 365 AS 'recency',
MAX(days_since) - 365 AS 'first_purchase',
COUNT(*) AS 'frequency',
AVG(purchase_amount) AS 'amount'
FROM data
WHERE days_since > 365
GROUP BY 1")
customers_2014$segment = "NA"
customers_2014$segment[which(customers_2014$recency > 365*3)] = "inactive"
customers_2014$segment[which(customers_2014$recency <= 365*3 & customers_2014$recency > 365*2)] = "cold"
customers_2014$segment[which(customers_2014$recency <= 365*2 & customers_2014$recency > 365*1)] = "warm"
customers_2014$segment[which(customers_2014$recency <= 365)] = "active"
customers_2014$segment[which(customers_2014$segment == "warm" & customers_2014$first_purchase <= 365*2)] = "new warm"
customers_2014$segment[which(customers_2014$segment == "warm" & customers_2014$amount < 100)] = "warm low value"
customers_2014$segment[which(customers_2014$segment == "warm" & customers_2014$amount >= 100)] = "warm high value"
customers_2014$segment[which(customers_2014$segment == "active" & customers_2014$first_purchase <= 365)] = "new active"
customers_2014$segment[which(customers_2014$segment == "active" & customers_2014$amount < 100)] = "active low value"
customers_2014$segment[which(customers_2014$segment == "active" & customers_2014$amount >= 100)] = "active high value"
customers_2014$segment = factor(x = customers_2014$segment, levels = c("inactive", "cold",
"warm high value", "warm low value", "new warm",
"active high value", "active low value", "new active"))
new_data = merge(x = customers_2014, y = customers_2015, by = "customer_id", all.x = TRUE)
head(new_data)
transition = table(new_data$segment.x, new_data$segment.y)
print(transition)
# Divide each row by its sum
transition = transition / rowSums(transition)
print(transition)
# --- USE TRANSITION MATRIX TO MAKE PREDICTIONS ------------
# Initialize a matrix with the number of customers in each segment today and after 10 periods
segments = matrix(nrow = 8, ncol = 11)
segments[, 1] = table(customers_2015$segment)
colnames(segments) = 2015:2025
row.names(segments) = levels(customers_2015$segment)
print(segments)
for (i in 2:11) {
segments[8, i] = 1000
segments[, i] = segments[, i-1] %*% transition
}
segments
for (i in 2:11) {
segments[8, i] = 1000
#  segments[, i] = segments[, i-1] %*% transition
}
segments
# __________________________________________________________
# //////////////////////////////////////////////////////////
#
#    MODULE 4 - CUSTOMER LIFETIME VALUE
# __________________________________________________________
# //////////////////////////////////////////////////////////
# --- SEGMENT CUSTOMERS IN 2014 AND 2015 -------------------
# Load text file into local variable called 'data'
data = read.delim(file = 'purchases.txt', header = FALSE, sep = '\t', dec = '.')
# Add headers and interpret the last column as a date, extract year of purchase
colnames(data) = c('customer_id', 'purchase_amount', 'date_of_purchase')
data$date_of_purchase = as.Date(data$date_of_purchase, "%Y-%m-%d")
data$year_of_purchase = as.numeric(format(data$date_of_purchase, "%Y"))
data$days_since       = as.numeric(difftime(time1 = "2016-01-01",
time2 = data$date_of_purchase,
units = "days"))
# Invoke library to compute key marketing indicators using SQL language
library(sqldf)
# Segment customers in 2015
customers_2015 = sqldf("SELECT customer_id,
MIN(days_since) AS 'recency',
MAX(days_since) AS 'first_purchase',
COUNT(*) AS 'frequency',
AVG(purchase_amount) AS 'amount'
FROM data GROUP BY 1")
customers_2015$segment = "NA"
customers_2015$segment[which(customers_2015$recency > 365*3)] = "inactive"
customers_2015$segment[which(customers_2015$recency <= 365*3 & customers_2015$recency > 365*2)] = "cold"
customers_2015$segment[which(customers_2015$recency <= 365*2 & customers_2015$recency > 365*1)] = "warm"
customers_2015$segment[which(customers_2015$recency <= 365)] = "active"
customers_2015$segment[which(customers_2015$segment == "warm" & customers_2015$first_purchase <= 365*2)] = "new warm"
customers_2015$segment[which(customers_2015$segment == "warm" & customers_2015$amount < 100)] = "warm low value"
customers_2015$segment[which(customers_2015$segment == "warm" & customers_2015$amount >= 100)] = "warm high value"
customers_2015$segment[which(customers_2015$segment == "active" & customers_2015$first_purchase <= 365)] = "new active"
customers_2015$segment[which(customers_2015$segment == "active" & customers_2015$amount < 100)] = "active low value"
customers_2015$segment[which(customers_2015$segment == "active" & customers_2015$amount >= 100)] = "active high value"
customers_2015$segment = factor(x = customers_2015$segment, levels = c("inactive", "cold",
"warm high value", "warm low value", "new warm",
"active high value", "active low value", "new active"))
# Segment customers in 2014
customers_2014 = sqldf("SELECT customer_id,
MIN(days_since) - 365 AS 'recency',
MAX(days_since) - 365 AS 'first_purchase',
COUNT(*) AS 'frequency',
AVG(purchase_amount) AS 'amount'
FROM data
WHERE days_since > 365
GROUP BY 1")
customers_2014$segment = "NA"
customers_2014$segment[which(customers_2014$recency > 365*3)] = "inactive"
customers_2014$segment[which(customers_2014$recency <= 365*3 & customers_2014$recency > 365*2)] = "cold"
customers_2014$segment[which(customers_2014$recency <= 365*2 & customers_2014$recency > 365*1)] = "warm"
customers_2014$segment[which(customers_2014$recency <= 365)] = "active"
customers_2014$segment[which(customers_2014$segment == "warm" & customers_2014$first_purchase <= 365*2)] = "new warm"
customers_2014$segment[which(customers_2014$segment == "warm" & customers_2014$amount < 100)] = "warm low value"
customers_2014$segment[which(customers_2014$segment == "warm" & customers_2014$amount >= 100)] = "warm high value"
customers_2014$segment[which(customers_2014$segment == "active" & customers_2014$first_purchase <= 365)] = "new active"
customers_2014$segment[which(customers_2014$segment == "active" & customers_2014$amount < 100)] = "active low value"
customers_2014$segment[which(customers_2014$segment == "active" & customers_2014$amount >= 100)] = "active high value"
customers_2014$segment = factor(x = customers_2014$segment, levels = c("inactive", "cold",
"warm high value", "warm low value", "new warm",
"active high value", "active low value", "new active"))
# --- COMPUTE TRANSITION MATRIX ----------------------------
# Compute transition matrix
new_data = merge(x = customers_2014, y = customers_2015, by = "customer_id", all.x = TRUE)
head(new_data)
transition = table(new_data$segment.x, new_data$segment.y)
print(transition)
# Divide each row by its sum
transition = transition / rowSums(transition)
print(transition)
# --- USE TRANSITION MATRIX TO MAKE PREDICTIONS ------------
# Initialize a matrix with the number of customers in each segment today and after 10 periods
segments = matrix(nrow = 8, ncol = 11)
segments[, 1] = table(customers_2015$segment)
colnames(segments) = 2015:2025
row.names(segments) = levels(customers_2015$segment)
print(segments)
# Compute for each an every period
for (i in 2:11) {
segments[8, i] = 1000
segments[, i] = segments[, i-1] %*% transition
}
# Plot inactive, active high value customers over time
barplot(segments[1, ])
barplot(segments[2, ])
# Display how segments will evolve over time
print(round(segments))
# --- COMPUTE THE (DISCOUNTED) CLV OF A DATABASE -----------
# Yearly revenue per segment
# This comes directly from module 2, lines 160-161
yearly_revenue = c(0, 0, 0, 0, 0, 323.57, 52.31, 79.17)
# Compute revenue per segment
revenue_per_segment = yearly_revenue * segments
print(revenue_per_segment)
# Compute yearly revenue
yearly_revenue = colSums(revenue_per_segment)
print(round(yearly_revenue))
barplot(yearly_revenue)
# Compute cumulated revenue
cumulated_revenue = cumsum(yearly_revenue)
print(round(cumulated_revenue))
barplot(cumulated_revenue)
# Create a discount factor
discount_rate = 0.10
discount = 1 / ((1 + discount_rate) ^ ((1:11) - 1))
print(discount)
# Compute discounted yearly revenue
disc_yearly_revenue = yearly_revenue * discount
print(round(disc_yearly_revenue))
barplot(disc_yearly_revenue)
lines(yearly_revenue)
# Compute discounted cumulated revenue
disc_cumulated_revenue = cumsum(disc_yearly_revenue)
print(round(disc_cumulated_revenue))
barplot(disc_cumulated_revenue)
# What is the database worth?
print(disc_cumulated_revenue[11] - yearly_revenue[1])
# __________________________________________________________
# //////////////////////////////////////////////////////////
#
#    MODULE 4 - CUSTOMER LIFETIME VALUE
# __________________________________________________________
# //////////////////////////////////////////////////////////
# --- SEGMENT CUSTOMERS IN 2014 AND 2015 -------------------
# Load text file into local variable called 'data'
data = read.delim(file = 'purchases.txt', header = FALSE, sep = '\t', dec = '.')
# Add headers and interpret the last column as a date, extract year of purchase
colnames(data) = c('customer_id', 'purchase_amount', 'date_of_purchase')
data$date_of_purchase = as.Date(data$date_of_purchase, "%Y-%m-%d")
data$year_of_purchase = as.numeric(format(data$date_of_purchase, "%Y"))
data$days_since       = as.numeric(difftime(time1 = "2016-01-01",
time2 = data$date_of_purchase,
units = "days"))
# Invoke library to compute key marketing indicators using SQL language
library(sqldf)
# Segment customers in 2015
customers_2015 = sqldf("SELECT customer_id,
MIN(days_since) AS 'recency',
MAX(days_since) AS 'first_purchase',
COUNT(*) AS 'frequency',
AVG(purchase_amount) AS 'amount'
FROM data GROUP BY 1")
customers_2015$segment = "NA"
customers_2015$segment[which(customers_2015$recency > 365*3)] = "inactive"
customers_2015$segment[which(customers_2015$recency <= 365*3 & customers_2015$recency > 365*2)] = "cold"
customers_2015$segment[which(customers_2015$recency <= 365*2 & customers_2015$recency > 365*1)] = "warm"
customers_2015$segment[which(customers_2015$recency <= 365)] = "active"
customers_2015$segment[which(customers_2015$segment == "warm" & customers_2015$first_purchase <= 365*2)] = "new warm"
customers_2015$segment[which(customers_2015$segment == "warm" & customers_2015$amount < 100)] = "warm low value"
customers_2015$segment[which(customers_2015$segment == "warm" & customers_2015$amount >= 100)] = "warm high value"
customers_2015$segment[which(customers_2015$segment == "active" & customers_2015$first_purchase <= 365)] = "new active"
customers_2015$segment[which(customers_2015$segment == "active" & customers_2015$amount < 100)] = "active low value"
customers_2015$segment[which(customers_2015$segment == "active" & customers_2015$amount >= 100)] = "active high value"
customers_2015$segment = factor(x = customers_2015$segment, levels = c("inactive", "cold",
"warm high value", "warm low value", "new warm",
"active high value", "active low value", "new active"))
# Segment customers in 2014
customers_2014 = sqldf("SELECT customer_id,
MIN(days_since) - 365 AS 'recency',
MAX(days_since) - 365 AS 'first_purchase',
COUNT(*) AS 'frequency',
AVG(purchase_amount) AS 'amount'
FROM data
WHERE days_since > 365
GROUP BY 1")
customers_2014$segment = "NA"
customers_2014$segment[which(customers_2014$recency > 365*3)] = "inactive"
customers_2014$segment[which(customers_2014$recency <= 365*3 & customers_2014$recency > 365*2)] = "cold"
customers_2014$segment[which(customers_2014$recency <= 365*2 & customers_2014$recency > 365*1)] = "warm"
customers_2014$segment[which(customers_2014$recency <= 365)] = "active"
customers_2014$segment[which(customers_2014$segment == "warm" & customers_2014$first_purchase <= 365*2)] = "new warm"
customers_2014$segment[which(customers_2014$segment == "warm" & customers_2014$amount < 100)] = "warm low value"
customers_2014$segment[which(customers_2014$segment == "warm" & customers_2014$amount >= 100)] = "warm high value"
customers_2014$segment[which(customers_2014$segment == "active" & customers_2014$first_purchase <= 365)] = "new active"
customers_2014$segment[which(customers_2014$segment == "active" & customers_2014$amount < 100)] = "active low value"
customers_2014$segment[which(customers_2014$segment == "active" & customers_2014$amount >= 100)] = "active high value"
customers_2014$segment = factor(x = customers_2014$segment, levels = c("inactive", "cold",
"warm high value", "warm low value", "new warm",
"active high value", "active low value", "new active"))
# --- COMPUTE TRANSITION MATRIX ----------------------------
# Compute transition matrix
new_data = merge(x = customers_2014, y = customers_2015, by = "customer_id", all.x = TRUE)
head(new_data)
transition = table(new_data$segment.x, new_data$segment.y)
print(transition)
# Divide each row by its sum
transition = transition / rowSums(transition)
print(transition)
# --- USE TRANSITION MATRIX TO MAKE PREDICTIONS ------------
# Initialize a matrix with the number of customers in each segment today and after 10 periods
segments = matrix(nrow = 8, ncol = 11)
segments[, 1] = table(customers_2015$segment)
colnames(segments) = 2015:2025
row.names(segments) = levels(customers_2015$segment)
print(segments)
# Compute for each an every period
for (i in 2:11) {
segments[, i] = segments[, i-1] %*% transition
segments[8, i] = 1000
}
# Plot inactive, active high value customers over time
barplot(segments[1, ])
barplot(segments[2, ])
# Display how segments will evolve over time
print(round(segments))
# --- COMPUTE THE (DISCOUNTED) CLV OF A DATABASE -----------
# Yearly revenue per segment
# This comes directly from module 2, lines 160-161
yearly_revenue = c(0, 0, 0, 0, 0, 323.57, 52.31, 79.17)
# Compute revenue per segment
revenue_per_segment = yearly_revenue * segments
print(revenue_per_segment)
# Compute yearly revenue
yearly_revenue = colSums(revenue_per_segment)
print(round(yearly_revenue))
barplot(yearly_revenue)
# Compute cumulated revenue
cumulated_revenue = cumsum(yearly_revenue)
print(round(cumulated_revenue))
barplot(cumulated_revenue)
# Create a discount factor
discount_rate = 0.10
discount = 1 / ((1 + discount_rate) ^ ((1:11) - 1))
print(discount)
# Compute discounted yearly revenue
disc_yearly_revenue = yearly_revenue * discount
print(round(disc_yearly_revenue))
barplot(disc_yearly_revenue)
lines(yearly_revenue)
# Compute discounted cumulated revenue
disc_cumulated_revenue = cumsum(disc_yearly_revenue)
print(round(disc_cumulated_revenue))
barplot(disc_cumulated_revenue)
# What is the database worth?
print(disc_cumulated_revenue[11] - yearly_revenue[1])
sum(segments[,8])
rm(list=ls(all=TRUE))
?ls
setwd("~/Data Science - Johns Hopkins University - COURSERA/3 - Getting and Cleanind Data/week4/ProjectWeek4")
?read.delim
data <- read.table(file = "UCI HAR Dataset/test/y_test.txt", header = FALSE)
head(data)
activity <- read.table(file = "UCI HAR Dataset/test/y_test.txt", header = FALSE)
rm(list=ls(all=TRUE))
activity <- read.table(file = "UCI HAR Dataset/test/y_test.txt", header = FALSE)
person <- read.table(fie = "UCI HAR Dataset/test/subject_test.txt")
person <- read.table(file = "UCI HAR Dataset/test/subject_test.txt", header = FALSE)
measures <- read.table(file = "UCI HAR Dataset/test/X_test.txt", header = FALSE)
head(measures)
head(person)
?merge
data <- merge(person, activity)
data <- person + activity
data <- cbind(person, activity)
head(person)
head(activity)
head(data)
data <- cbind(person, activity, measures)
rm(list = ls(all = TRUE))
# Reading test sets
activity_test <- read.table(file = "UCI HAR Dataset/test/y_test.txt", header = FALSE)
person_test <- read.table(file = "UCI HAR Dataset/test/subject_test.txt", header = FALSE)
measures_test <- read.table(file = "UCI HAR Dataset/test/X_test.txt", header = FALSE)
test <- cbind(person_test, activity_test, measures_test)
# Reading the training set
activity_training <- read.table(file = "UCI HAR Dataset/train/y_train.txt", header = FALSE)
person_training <- read.table(file = "UCI HAR Dataset/train/subject_train.txt", header = FALSE)
measures_training <- read.table(file = "UCI HAR Dataset/train/X_train.txt", header = FALSE)
trainig <- cbind(person_training, activity_training, measures_training)
View(test)
?merge
View(trainig)
colnames(test) <- c("person", "activity")
colnames(training) <- c("person", "activity")
colnames(trainig) <- c("person", "activity")
View(trainig)
View(test)
rm(list = ls(all = TRUE))
# Reading test sets
activity_test <- read.table(file = "UCI HAR Dataset/test/y_test.txt", header = FALSE)
person_test <- read.table(file = "UCI HAR Dataset/test/subject_test.txt", header = FALSE)
measures_test <- read.table(file = "UCI HAR Dataset/test/X_test.txt", header = FALSE)
test <- cbind(person_test, activity_test, measures_test)
colnames(test) <- c("person", "activity")
# Reading the training set
activity_training <- read.table(file = "UCI HAR Dataset/train/y_train.txt", header = FALSE)
person_training <- read.table(file = "UCI HAR Dataset/train/subject_train.txt", header = FALSE)
measures_training <- read.table(file = "UCI HAR Dataset/train/X_train.txt", header = FALSE)
training <- cbind(person_training, activity_training, measures_training)
colnames(training) <- c("person", "activity")
data1 <- merge(x = training, y = test, by.x = c("person", "activity"), by.y = c("person", "activity"), all.x = TRUE)
View(data1)
View(training)
data1 <- merge(x = training, y = test, by.x = c("person", "activity"), by.y = c("person", "activity"))
features <- read.table(file = "UCI HAR Dataset/features.txt", header = FALSE)
head(features)
is_mean <- grepl("mean", features)
features_mean <- features[is_mean,]
head(features_mean)
is_mean <- grepl("mean", features[,2])
features_mean <- features[is_mean,]
head(features_mean)
id_mean <- features_mean[,1]
is_std <- grepl("std", features[,2])
features_std <- features[is_std,]
head(features_std)
is_mean <- grepl("mean | std", features[,2])
is_mean <- grepl("mean %|% std", features[,2])
?grepl
is_mean <- grepl("[mean std]", features[,2])
features_mean <- features[is_mean,]
head(features_mean)
is_mean <- grepl("[mean std]", features[,2])
features_mean <- features[is_mean,]
View(features_mean)
is_mean <- grepl("/(mean | std)n/", features[,2])
features_mean <- features[is_mean,]
is_mean <- grepl("[mean|std]", features[,2])
features_mean <- features[is_mean,]
is_mean <- grepl("[mean | std]", features[,2])
features_mean <- features[is_mean,]
is_mean <- grepl("mean | std", features[,2])
features_mean <- features[is_mean,]
is_mean <- grepl("mean|std", features[,2])
features_mean <- features[is_mean,]
View(features_mean)
rm(list = ls(all = TRUE))
features <- read.table(file = "UCI HAR Dataset/features.txt", header = FALSE)
is_mean_std <- grepl("mean|std", features[,2])
features_mean_std <- features[is_mean_std,]
id_mean <- features_mean_std[,1]
activity_test <- read.table(file = "UCI HAR Dataset/test/y_test.txt", header = FALSE)
person_test <- read.table(file = "UCI HAR Dataset/test/subject_test.txt", header = FALSE)
measures_test <- read.table(file = "UCI HAR Dataset/test/X_test.txt", header = FALSE)
test <- cbind(person_test, activity_test, measures_test)
measures_test <- measures_test[,id_mean]
test <- cbind(person_test, activity_test, measures_test)
rm(list = ls(all = TRUE))
features <- read.table(file = "UCI HAR Dataset/features.txt", header = FALSE)
is_mean_std <- grepl("mean|std", features[,2])
features_mean_std <- features[is_mean_std,]
id_mean_std <- features_mean_std[,1]
names_mean_std <- features_mean_std[,2]
names_mean_std <- as.character(features_mean_std[,2])
person_test <- read.table(file = "UCI HAR Dataset/test/subject_test.txt", header = FALSE)
activity_test <- read.table(file = "UCI HAR Dataset/test/y_test.txt", header = FALSE)
measures_test <- read.table(file = "UCI HAR Dataset/test/X_test.txt", header = FALSE)
measures_test <- measures_test[,id_mean_std]
test <- cbind(person_test, activity_test, measures_test)
colnames(test) <- c("person", "activity") + names_mean_std
names <- c("person", "activity") + names_mean_std
colnames(test) <- c("person", "activity", names_mean_std)
View(test)
person_training <- read.table(file = "UCI HAR Dataset/train/subject_train.txt", header = FALSE)
activity_training <- read.table(file = "UCI HAR Dataset/train/y_train.txt", header = FALSE)
measures_training <- read.table(file = "UCI HAR Dataset/train/X_train.txt", header = FALSE)
measures_training <- measures_training[,id_mean_std]
training <- cbind(person_training, activity_training, measures_training)
colnames(training) <- c("person", "activity", names_mean_std)
head(test)
View(test)
class(test$activity)
test$activity <- as.character(test$activity)
class(test$activity)
test$activity[test$activity == "1"] <- "WALKING"
test$activity[test$activity == "2"] <- "WALKING_UPSTAIRS"
test$activity[test$activity == "3"] <- "WALKING_DOWNSTAIRS"
test$activity[test$activity == "4"] <- "SITTING"
test$activity[test$activity == "5"] <- "STANDING"
test$activity[test$activity == "6"] <- "LAYING"
View(test)
training$activity <- as.character(training$activity)
training$activity[training$activity == "1"] <- "WALKING"
training$activity[training$activity == "2"] <- "WALKING_UPSTAIRS"
training$activity[training$activity == "3"] <- "WALKING_DOWNSTAIRS"
training$activity[training$activity == "4"] <- "SITTING"
training$activity[training$activity == "5"] <- "STANDING"
training$activity[training$activity == "6"] <- "LAYING"
View(training)
?merge
training_test <- rbind(training, test)
View(training_test)
?unique
?melt
??melt
?unique
?colapse
??colapse
